2023-07-23 11:22:55.607 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 11:22:57.749 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 13:10:39.151 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 13:10:39.156 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 13:10:39.327 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 13:23:55.638 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 13:23:57.727 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 14:47:51.349 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2023-07-23 14:48:04.310 [http-nio-8201-exec-7] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2023-07-23 14:48:14.234 [http-nio-8201-exec-2] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2023-07-23 14:54:30.463 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 14:54:30.477 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 14:54:31.155 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 14:54:31.160 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 14:58:16.357 [http-nio-8201-exec-2] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:00:01.216 [http-nio-8201-exec-8] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:04:21.138 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:09:37.013 [http-nio-8201-exec-9] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:10:42.356 [http-nio-8201-exec-7] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:11:27.169 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:11:27.202 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 15:11:28.044 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:11:28.051 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:13:05.583 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:13:22.133 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:13:22.145 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 15:13:22.837 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:13:22.843 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:16:59.019 [http-nio-8201-exec-3] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:17:16.622 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:17:16.644 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 15:17:17.373 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:17:17.379 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:20:27.244 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.NullPointerException]
2023-07-23 15:20:42.634 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:20:42.650 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 15:20:43.331 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:20:43.336 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:55:01.972 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:55:02.423 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:55:37.068 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 15:55:37.081 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 15:55:37.886 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 15:55:37.892 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:16:24.755 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.hospital]' package. Please check your configuration.
2023-07-23 16:16:24.807 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-23 16:16:24.937 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:16:30.443 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:16:30.532 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-23 16:16:31.706 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:17:17.335 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:17:18.851 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:23:12.821 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 16:23:12.834 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 16:23:13.441 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:23:13.446 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:29:38.680 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:29:40.566 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:30:09.196 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=5m17s426ms780µs200ns).
2023-07-23 16:30:09.311 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler com.chen.commonutil.exception.GlobalExceptionHandler#error(Exception)
org.apache.catalina.connector.ClientAbortException: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:309)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:272)
	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)
	at java.io.FilterOutputStream.flush(FilterOutputStream.java:140)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush(UTF8JsonGenerator.java:1153)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:923)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:346)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:277)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:403)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:141)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1300)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1111)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1253)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:764)
	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:717)
	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:707)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:572)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.flush(ChunkedOutputFilter.java:157)
	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:220)
	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1195)
	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:402)
	at org.apache.coyote.Response.action(Response.java:209)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:305)
	... 57 common frames omitted
2023-07-23 16:30:25.500 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 16:30:25.512 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 16:30:26.166 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:30:26.172 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:34:48.307 [HikariPool-1 housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3m467ms984µs400ns).
2023-07-23 16:34:54.137 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:34:56.078 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:39:13.105 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7m47s574ms225µs).
2023-07-23 16:39:43.691 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.hospital]' package. Please check your configuration.
2023-07-23 16:39:43.741 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-23 16:39:43.876 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:39:50.188 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:39:50.670 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-23 16:39:51.467 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:41:55.725 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:41:57.273 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-23 16:42:11.841 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-23 16:42:11.854 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-23 16:42:12.376 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:42:12.379 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-23 16:45:32.663 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-23 16:45:34.244 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 11:36:49.249 [http-nio-8201-exec-7] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.dao.DuplicateKeyException: E11000 duplicate key error collection: yygh_hosp.Hospital index: hoscode dup key: { hoscode: "1000_01" }; nested exception is com.mongodb.MongoWriteException: E11000 duplicate key error collection: yygh_hosp.Hospital index: hoscode dup key: { hoscode: "1000_01" }]
2023-07-24 11:43:08.774 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 11:43:08.927 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 11:56:04.297 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 11:56:04.307 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-24 11:56:04.900 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 11:56:04.904 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:18:42.222 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 19:18:42.982 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:22:08.905 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 19:22:08.918 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-24 19:22:09.582 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:22:09.589 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:32:03.951 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.hospital]' package. Please check your configuration.
2023-07-24 19:32:04.004 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-24 19:32:04.172 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:32:09.914 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-24 19:32:10.359 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-24 19:32:11.540 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:33:41.524 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-24 19:33:43.156 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:35:03.504 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [HospitalException{code=300, message=签名错误}]
2023-07-24 19:36:41.600 [http-nio-8201-exec-3] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [HospitalException{code=300, message=签名错误}]
2023-07-24 19:39:22.897 [http-nio-8201-exec-5] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [HospitalException{code=300, message=签名错误}]
2023-07-24 19:39:51.401 [http-nio-8201-exec-8] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [HospitalException{code=300, message=签名错误}]
2023-07-24 19:42:09.978 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 19:42:09.992 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-24 19:42:10.857 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:42:10.864 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:55:01.756 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=10m3s418ms672µs600ns).
2023-07-24 19:55:01.890 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Failure in @ExceptionHandler com.chen.commonutil.exception.GlobalExceptionHandler#error(HospitalException)
org.apache.catalina.connector.ClientAbortException: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:309)
	at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:272)
	at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:118)
	at java.io.FilterOutputStream.flush(FilterOutputStream.java:140)
	at com.fasterxml.jackson.core.json.UTF8JsonGenerator.flush(UTF8JsonGenerator.java:1153)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:923)
	at org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.writeInternal(AbstractJackson2HttpMessageConverter.java:346)
	at org.springframework.http.converter.AbstractGenericHttpMessageConverter.write(AbstractGenericHttpMessageConverter.java:104)
	at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:277)
	at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.handleReturnValue(RequestResponseBodyMethodProcessor.java:181)
	at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:82)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:123)
	at org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:407)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:61)
	at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:141)
	at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:80)
	at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1300)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1111)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:542)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:374)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:888)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1597)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)
	at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:138)
	at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)
	at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:152)
	at org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.doWrite(NioEndpoint.java:1253)
	at org.apache.tomcat.util.net.SocketWrapperBase.doWrite(SocketWrapperBase.java:764)
	at org.apache.tomcat.util.net.SocketWrapperBase.flushBlocking(SocketWrapperBase.java:717)
	at org.apache.tomcat.util.net.SocketWrapperBase.flush(SocketWrapperBase.java:707)
	at org.apache.coyote.http11.Http11OutputBuffer$SocketOutputBuffer.flush(Http11OutputBuffer.java:572)
	at org.apache.coyote.http11.filters.ChunkedOutputFilter.flush(ChunkedOutputFilter.java:157)
	at org.apache.coyote.http11.Http11OutputBuffer.flush(Http11OutputBuffer.java:220)
	at org.apache.coyote.http11.Http11Processor.flush(Http11Processor.java:1195)
	at org.apache.coyote.AbstractProcessor.action(AbstractProcessor.java:402)
	at org.apache.coyote.Response.action(Response.java:209)
	at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:305)
	... 57 common frames omitted
2023-07-24 19:55:08.102 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.hospital]' package. Please check your configuration.
2023-07-24 19:55:08.491 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-24 19:55:08.929 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:55:20.935 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-24 19:55:21.362 [restartedMain] WARN  org.apache.tomcat.util.modeler.Registry - The MBean registry cannot be disabled because it has already been initialised
2023-07-24 19:55:22.362 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:55:43.258 [restartedMain] WARN  org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.atguigu.hospital.mapper]' package. Please check your configuration.
2023-07-24 19:55:47.981 [restartedMain] WARN  org.thymeleaf.templatemode.TemplateMode - [THYMELEAF][restartedMain] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2023-07-24 19:55:49.678 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-07-24 19:55:49.727 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-07-24 19:55:51.459 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-07-24 19:55:51.474 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:26:39.673 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:26:39.684 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:31:38.749 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:31:38.753 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:34:12.396 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-02 17:34:12.418 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-02 17:34:13.334 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-02 17:34:13.342 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-03 10:18:29.569 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-03 10:18:30.344 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-03 10:18:30.348 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-03 10:18:31.307 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-03 10:18:31.315 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-03 10:18:31.482 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-05 10:49:45.491 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=5h18m4s190ms84µs400ns).
2023-08-06 10:55:15.221 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 10:55:16.255 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 10:55:16.265 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 10:55:18.836 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 10:55:18.862 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 10:55:19.095 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-06 11:30:15.397 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 11:30:16.052 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:30:16.056 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:33:12.403 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 11:33:13.056 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:33:13.061 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:41:51.152 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:42:20.203 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 11:42:21.317 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:42:21.324 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 11:42:54.194 [http-nio-8201-exec-8] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IllegalArgumentException: Source must not be null]
2023-08-06 11:44:06.764 [http-nio-8201-exec-10] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.IllegalArgumentException: Source must not be null]
2023-08-06 12:18:26.026 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 12:18:47.779 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 12:18:48.391 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 12:18:48.394 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 16:07:15.758 [restartedMain] WARN 
                org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.yygh.hosp]' package. Please check your configuration.
2023-08-06 16:07:16.153 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 16:07:54.325 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-06 16:07:56.650 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-06 16:07:56.655 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 17:11:35.282 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 17:12:05.312 [restartedMain] WARN 
                o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hospitalController': Unsatisfied dependency expressed through field 'hospitalService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hospitalServiceImpl': Unsatisfied dependency expressed through field 'hospitalRepository'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'hospitalRepository': Invocation of init method failed; nested exception is org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=192.168.65.131:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting to connect. Client view of cluster state is {type=UNKNOWN, servers=[{address=192.168.65.131:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]
2023-08-09 17:14:57.434 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 17:14:59.656 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 17:14:59.661 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 17:16:33.861 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 17:16:37.895 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 17:16:37.914 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:05:13.193 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 19:05:15.458 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:05:15.462 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:14:25.286 [restartedMain] WARN 
                org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.yygh.hosp]' package. Please check your configuration.
2023-08-09 19:14:25.935 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:14:53.093 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 19:14:55.373 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:14:55.379 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:15:30.278 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:15:30.283 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:15:30.415 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-09 19:17:52.883 [restartedMain] WARN 
                org.mybatis.spring.mapper.ClassPathMapperScanner - No MyBatis mapper was found in '[com.chen.yygh.hosp]' package. Please check your configuration.
2023-08-09 19:17:53.400 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:18:31.118 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-09 19:18:33.201 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-09 19:18:33.206 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-10 16:54:55.559 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=13h35m37s558ms424µs701ns).
2023-08-11 17:47:55.172 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:47:55.324 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-11 17:47:55.483 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:02.013 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:02.100 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-11 17:53:11.432 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:47.136 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-11 17:53:49.654 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:49.662 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:50.834 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:50.839 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 17:53:51.005 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-11 18:02:24.143 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2023-08-11 18:08:33.522 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-11 18:08:40.905 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 18:08:40.918 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 18:08:43.398 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 18:08:43.413 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-11 18:08:43.804 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-13 11:52:11.553 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-13 11:52:41.631 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-13 12:06:50.395 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-13 12:06:50.461 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-13 12:06:51.865 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-14 09:00:33.809 [lettuce-nioEventLoop-11-2] WARN 
                io.lettuce.core.protocol.ConnectionWatchdog - Cannot reconnect to [192.168.65.131:6379]: Reconnection attempt exceeded timeout of 60 SECONDS 
2023-08-14 09:00:33.873 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=6h16m21s322ms807µs100ns).
2023-08-14 09:00:38.910 [HikariPool-2 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=6h16m21s340ms867µs300ns).
2023-08-14 09:00:43.879 [lettuce-nioEventLoop-11-3] WARN 
                io.lettuce.core.protocol.ConnectionWatchdog - Cannot reconnect to [192.168.65.131:6379]: connection timed out: /192.168.65.131:6379
2023-08-17 09:43:32.204 [lettuce-nioEventLoop-11-5] WARN 
                io.lettuce.core.protocol.ConnectionWatchdog - Cannot reconnect to [192.168.65.131:6379]: Reconnection attempt exceeded timeout of 60 SECONDS 
2023-08-17 09:43:42.304 [lettuce-nioEventLoop-11-6] WARN 
                io.lettuce.core.protocol.ConnectionWatchdog - Cannot reconnect to [192.168.65.131:6379]: connection timed out: /192.168.65.131:6379
2023-08-17 09:43:56.206 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=3h13m22s94ms902µs300ns).
2023-08-17 09:43:58.161 [HikariPool-2 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-2 - Thread starvation or clock leap detected (housekeeper delta=3h13m22s94ms349µs900ns).
2023-08-17 18:02:30.266 [com.alibaba.nacos.naming.beat.sender] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance/beat?beat=%7B%22cluster%22%3A%22DEFAULT%22%2C%22ip%22%3A%22172.31.0.1%22%2C%22metadata%22%3A%7B%22preserved.register.source%22%3A%22SPRING_CLOUD%22%7D%2C%22period%22%3A5000%2C%22port%22%3A8201%2C%22scheduled%22%3Afalse%2C%22serviceName%22%3A%22DEFAULT_GROUP%40%40service-hosp%22%2C%22stopped%22%3Afalse%2C%22weight%22%3A1.0%7D&app=unknown&serviceName=DEFAULT_GROUP%40%40service-hosp&encoding=UTF-8&namespaceId=public from 127.0.0.1
2023-08-17 18:02:30.931 [com.alibaba.nacos.naming.beat.sender] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance/beat?beat=%7B%22cluster%22%3A%22DEFAULT%22%2C%22ip%22%3A%22172.31.0.1%22%2C%22metadata%22%3A%7B%22preserved.register.source%22%3A%22SPRING_CLOUD%22%7D%2C%22period%22%3A5000%2C%22port%22%3A8202%2C%22scheduled%22%3Afalse%2C%22serviceName%22%3A%22DEFAULT_GROUP%40%40service-cmn%22%2C%22stopped%22%3Afalse%2C%22weight%22%3A1.0%7D&app=unknown&serviceName=DEFAULT_GROUP%40%40service-cmn&encoding=UTF-8&namespaceId=public from 127.0.0.1
2023-08-17 18:02:35.030 [SpringContextShutdownHook] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance?app=unknown&namespaceId=public&port=8201&clusterName=DEFAULT&ip=172.31.0.1&ephemeral=true&serviceName=DEFAULT_GROUP%40%40service-hosp&encoding=UTF-8 from 127.0.0.1
2023-08-17 18:02:36.881 [com.alibaba.nacos.client.naming.updater] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance/list?app=unknown&healthyOnly=false&namespaceId=public&clientIP=192.168.191.1&serviceName=DEFAULT_GROUP%40%40service-cmn&udpPort=58130&encoding=UTF-8 from 127.0.0.1
2023-08-17 18:02:38.061 [com.alibaba.nacos.naming.beat.sender] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance/beat?beat=%7B%22cluster%22%3A%22DEFAULT%22%2C%22ip%22%3A%22172.31.0.1%22%2C%22metadata%22%3A%7B%22preserved.register.source%22%3A%22SPRING_CLOUD%22%7D%2C%22period%22%3A5000%2C%22port%22%3A8202%2C%22scheduled%22%3Afalse%2C%22serviceName%22%3A%22DEFAULT_GROUP%40%40service-cmn%22%2C%22stopped%22%3Afalse%2C%22weight%22%3A1.0%7D&app=unknown&serviceName=DEFAULT_GROUP%40%40service-cmn&encoding=UTF-8&namespaceId=public from 127.0.0.1
2023-08-17 18:02:41.079 [SpringContextShutdownHook] WARN 
                com.alibaba.nacos.client.naming - failed to request http://localhost:8848/nacos/v1/ns/instance?app=unknown&namespaceId=public&port=8202&clusterName=DEFAULT&ip=172.31.0.1&ephemeral=true&serviceName=DEFAULT_GROUP%40%40service-cmn&encoding=UTF-8 from 127.0.0.1
2023-08-18 11:25:16.709 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-18 11:25:19.012 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 11:25:19.020 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 11:25:22.733 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 11:25:22.739 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 11:25:22.906 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-18 11:26:29.810 [restartedMain] WARN 
                o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'hospitalSetController': Unsatisfied dependency expressed through field 'hospitalSetService'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.chen.yygh.hosp.service.HospitalSetService' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2023-08-18 11:27:02.452 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-18 11:27:04.446 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 11:27:04.450 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 23:00:15.924 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 23:02:54.768 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-18 23:02:56.917 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-18 23:02:56.923 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-20 11:32:50.134 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-20 11:32:50.146 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-20 11:32:52.465 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-20 11:32:52.472 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-20 11:35:49.877 [http-nio-8201-exec-2] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.RuntimeException: com.netflix.client.ClientException: Load balancer does not have available server for client: service-cmn]
2023-08-20 11:35:49.879 [http-nio-8201-exec-1] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.RuntimeException: com.netflix.client.ClientException: Load balancer does not have available server for client: service-cmn]
2023-08-20 11:35:53.700 [http-nio-8201-exec-5] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.RuntimeException: com.netflix.client.ClientException: Load balancer does not have available server for client: service-cmn]
2023-08-20 11:36:11.749 [http-nio-8201-exec-6] WARN 
                o.s.w.s.m.m.a.ExceptionHandlerExceptionResolver - Resolved [java.lang.RuntimeException: com.netflix.client.ClientException: Load balancer does not have available server for client: service-cmn]
2023-08-20 11:37:08.204 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-20 11:37:08.208 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-20 11:37:08.333 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-21 08:55:23.900 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=9h21m9s109ms143µs100ns).
2023-08-21 15:35:39.242 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12m43s451ms670µs).
2023-08-22 10:55:33.148 [HikariPool-1 housekeeper] WARN 
                com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=12h44m20s413ms648µs299ns).
2023-08-22 15:18:01.796 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
2023-08-22 15:18:01.812 [restartedMain] WARN 
                o.s.d.m.c.index.MongoPersistentEntityIndexCreator - Automatic index creation will be disabled by default as of Spring Data MongoDB 3.x.
	Please use 'MongoMappingContext#setAutoIndexCreation(boolean)' or override 'MongoConfigurationSupport#autoIndexCreation()' to be explicit.
	However, we recommend setting up indices manually in an application ready block. You may use index derivation there as well.

	> -----------------------------------------------------------------------------------------
	> @EventListener(ApplicationReadyEvent.class)
	> public void initIndicesAfterStartup() {
	>
	>     IndexOperations indexOps = mongoTemplate.indexOps(DomainType.class);
	>
	>     IndexResolver resolver = new MongoPersistentEntityIndexResolver(mongoMappingContext);
	>     resolver.resolveIndexFor(DomainType.class).forEach(indexOps::ensureIndex);
	> }
	> -----------------------------------------------------------------------------------------

2023-08-22 15:18:05.347 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-22 15:18:05.354 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-22 15:18:14.231 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-22 15:18:14.239 [restartedMain] WARN 
                com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
2023-08-22 15:18:14.524 [restartedMain] WARN 
                o.s.b.d.autoconfigure.OptionalLiveReloadServer - Unable to start LiveReload server
